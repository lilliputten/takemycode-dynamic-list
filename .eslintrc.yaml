# @changed 2025.06.16, 21:41
# @see https://eslint.org/docs/rules/

'$schema': https://json.schemastore.org/eslintrc
root: true
extends:
  - prettier
  # - plugin:tailwindcss/recommended
# plugins:
#   - tailwindcss
#   # - jest
rules:
  react/jsx-key: off
  # tailwindcss/no-custom-classname: off
  # tailwindcss/classnames-order: warn
  no-console: warn
  no-debugger: warn
  no-extra-semi: warn
  no-redeclare: warn
  no-undef: error
  no-unreachable: warn
  prefer-const: warn
  no-empty: warn
  quotes:
    - warn
    - single
  semi:
    - warn
    - always
settings:
  tailwindcss:
    callees:
      - cn
    config: client/tailwind.config.ts
  next:
    rootDir: true

env:
  es6: true
  # jest: true
  # jest/globals: true
  commonjs: true

overrides:
  - # Typescript files (ts,tsx)...
    files: '**/*.+(ts|tsx)'
    parser: '@typescript-eslint/parser'
    extends:
      - 'eslint:recommended'
      - 'plugin:prettier/recommended' # prettier: Slighly slower (+0.3s)
      - 'plugin:react/recommended'
      - 'plugin:react/jsx-runtime'
      - 'plugin:@typescript-eslint/recommended'
    settings:
      react:
        version: '19.1.0'
    parserOptions:
      ecmaVersion: 12
      sourceType: 'module'
      # project: './tsconfig.json' # Very slow
    plugins:
      # - 'react'
      - '@typescript-eslint'
      - 'prettier' # prettier: Slighly slower (+~0.3s)
    rules:
      curly:
        - 'warn'
        - 'all'
      no-undef: off # Disable js no-undef rule for typescript sources. Using ts2304 instead.
      no-debugger: warn
      no-console: warn
      prettier/prettier: # prettier: Slighly slower (+0.3s)
        - 'warn' # Can we use warn if we still use `eslint --max-warnings=0` in `package.json`?
        - endOfLine: 'auto'
      import/no-namespace: off
      no-unused-vars: off
      prefer-const: warn
      '@typescript-eslint/explicit-member-accessibility':
        - 'error'
        - accessibility: 'no-public'
      '@typescript-eslint/no-unused-vars':
        - 'warn'
        - # varsIgnorePattern: '^[T][A-Z]\\w+' # M.b. useful for typescript `TSmth` types: eslint may treat them us 'unused'.
          varsIgnorePattern: '^_'
          argsIgnorePattern: '^_'
      '@typescript-eslint/no-require-imports': warn
      '@typescript-eslint/array-type': error
      '@typescript-eslint/ban-ts-comment': off
      '@typescript-eslint/explicit-module-boundary-types': off # Disable 'Missing return type on function' if no explicit `: void` specified
      '@typescript-eslint/explicit-function-return-type': off # Causes 'Missing return type on function' if no explicit `: void` specified
      'func-call-spacing':
        - 'error'
        - 'never'
      '@typescript-eslint/no-explicit-any': warn
      '@typescript-eslint/no-extraneous-class':
        - 'error'
        - allowStaticOnly: true
      '@typescript-eslint/no-useless-constructor': error
      '@typescript-eslint/prefer-for-of': warn
      '@typescript-eslint/prefer-function-type': warn
      '@typescript-eslint/no-empty-object-type': off
      react/no-unescaped-entities: off
      react/prop-types: off
      react/no-multi-comp:
        - 'error'
        - ignoreStateless: true
      react/no-this-in-sfc: error
      react/no-unstable-nested-components: off
      react/style-prop-object: error
      react/jsx-handler-names: error
      react/jsx-no-constructed-context-values: warn
      react/boolean-prop-naming: error
      react/jsx-uses-react: off
      react/react-in-jsx-scope: off
      react/no-array-index-key: warn
      react/jsx-boolean-value: warn
      react/jsx-fragments: error
      react/destructuring-assignment: warn
      react/sort-comp:
        - 'error'
        - order:
            - 'static-variables'
            - 'static-methods'
            - 'lifecycle'
            - 'everything-else'
            - 'rendering'
          groups:
            rendering:
              - '/^render.+$/'
              - 'render'
      react/jsx-closing-tag-location: warn
      react/jsx-curly-newline: off
      react/jsx-curly-spacing: error
      react/jsx-equals-spacing: error
      react/jsx-indent:
        - 'warn'
        - 2
        - indentLogicalExpressions: false
      react/jsx-indent-props:
        - 'warn'
        - indentMode: 2
          ignoreTernaryOperator: false
      react/no-unknown-property:
        - 'error'
        - ignore:
            - 'tw'
            - 'stroke-width'
            - 'stroke-linecap'
            - 'stroke-linejoin'

  - # Raw js files (from root)...
    files: '**/*.js'
    env:
      node: true
      commonjs: true
      es6: true
    extends:
      - 'eslint:recommended'
      - 'plugin:prettier/recommended'
    plugins:
      - 'prettier' # prettier: Slighly slower (+~0.3s)
    rules:
      prettier/prettier: warn
      no-unused-vars:
        - 'warn'
        - argsIgnorePattern: '^_'
      no-console: warn
      no-debugger: warn
      no-extra-semi: warn
      no-redeclare: warn
      no-undef: error
      no-unreachable: warn
      prefer-const: warn
      semi:
        - 'warn'
        - 'always'

  - # Raw mjs files (from root)...
    files: '**/*.mjs'
    parserOptions:
      sourceType: 'module'
    env:
      node: true
      es6: true
    extends:
      - 'eslint:recommended'
      - 'plugin:prettier/recommended'
    plugins:
      - 'prettier' # prettier: Slighly slower (+~0.3s)
    rules:
      prettier/prettier: warn
      no-unused-vars:
        - 'warn'
        - argsIgnorePattern: '^_'
      no-console: warn
      no-debugger: warn
      no-extra-semi: warn
      no-redeclare: warn
      no-undef: error
      no-unreachable: warn
      prefer-const: warn
      semi:
        - 'warn'
        - 'always'

  - # Tests...
    files: '**/*.test.ts'
    env:
      jest: true
      jest/globals: true
    plugins:
      - jest
    extends:
      - 'plugin:jest/recommended'
    rules:
      jest/prefer-expect-assertions: 'off'
  - # jsonc files - commented json (@see https://www.npmjs.com/package/eslint-plugin-jsonc)...
    files: '**/*.jsonc'
    extends:
      - 'plugin:jsonc/recommended-with-jsonc'
    rules:
      prettier/prettier: warn

  - # json files (@see https://www.npmjs.com/package/eslint-plugin-json)...
    files: '**/*.json'
    extends:
      - 'plugin:json/recommended-legacy'
    rules:
      prettier/prettier: warn

  - # yaml files - commented json (@see https://www.npmjs.com/package/eslint-plugin-yaml)...
    files: '**/*.+(yml|yaml)'
    plugins:
      - 'yaml'
    extends:
      - 'plugin:yaml/legacy'
